# -*- coding: utf-8 -*-

import TOBY
from TOBY.lib.curve.ttypes import *
from datetime import datetime
import time, datetime, random, sys, re, os, json, subprocess, codecs, threading, glob

cl = TOBY.LINE()
cl.login(token="EqOXQ4i06LJGMEt9Ra10.8Yc3rgzqX99L+IbVrXPqea.BT2yF9KqvASdoWY4Xen6ySw4FEhItAtaEukEey+qFQg=")
cl.loginResult()

ki = TOBY.LINE()
ki.login(token="Eq1tW76gd3SrTeo5QeSd.SELnUjow3wY9CHKpnXWEZq.2OR3cKcZJqV5IfFFcIK2MBu75pyf0ehCKQNonFplV6g=")
ki.loginResult()

ki2 = TOBY.LINE()
ki2.login(token="Eq8S9HvzXKFmHB9mXbT3.q755/APAmye348Cnpw3BqW.oWOhbUFjOBWsqPmYgt6UPxMaZu6qEk+Fdn2brnLAQjM=")
ki2.loginResult()

ki3 = TOBY.LINE()
ki3.login(token="EqXOx1fsb7e41hNZje1b.C7Q4rV7hwUlhl94Etezo/W.JvLN8Wh266bHZ+rrW/cbxoennEU4KMg+K8yoXayL8JU=")
ki3.loginResult()

ki4 = TOBY.LINE()
ki4.login(token="EqbkO6qLwjxZmMSauy12.aTn8MntboFIbYZraIpPsmG.dD3w/bcVApvXr0n7ulreo+yzZQjGGW8mbhycjaeBTK8=")
ki4.loginResult()

ki5 = TOBY.LINE()
ki5.login(token="EqitCSHWjlCNPekJi5Ad.PX9Uc3NjuhW1FZqQPMmk+q.QIiQ3vO5DeVJMzv/dGYZQEhWUcgvVRDbZHUXEkWx6Yw=")
ki5.loginResult()

ki6 = TOBY.LINE()
ki6.login(token="EqMsJkuCCeeq8hgJfSG4.7/a1mB/p50WPAKhDvh0AHa.k+IS3vJti0Awtcne89cVHi3DaNjyoNDdOc4X3sL68MU=")
ki6.loginResult()

ki7 = TOBY.LINE()
ki7.login(token="EqC6w0Gf9VVduy38pZm6.bIyYMtAVJvYBGqFNiOoa9G.HudRbGXIMgsSrxQjHBd6oTDQ5Nhq7547+WCHnsdGHS8=")
ki7.loginResult()

ki8 = TOBY.LINE()
ki8.login(token="EqMJTKGELDaLNyhqnxJ6.wEInoKsML1Nldg79jMwZ9G.bt1rMJ1w4B3F4OBEApT50ru1LBFe5LInweTiitAiaZU=")
ki8.loginResult()

ki9 = TOBY.LINE()
ki9.login(token="EqUc5MvHnTHD4SDbMsc9./h7DfMMh2OZJ6qx4+R9moq.PWbvK5R5ccdRiS+wX7ElsRfM4GPxg7Exy2srigpwrwM=")
ki9.loginResult()

print("Success")
reload(sys)
sys.setdefaultencoding('utf-8')
helpMessage = """==========

COMMAND
☫[My help]
☫[Mybot]
☫[Me]
☫[Kb-Kb8「Contact Bot」]
☫[Gift-Gift3]
☫[Contact]
☫[Mid]
☫[All mid]
☫[TL:「Text」
☫[Mybio:「Text」]
☫[MyName:「Text」]
☫[Mid:「mid」]
☫[Contact 「On/Off」]
☫[Auto Join 「On/Off」]
☫[Add 「On/Off」]
☫[Share 「On/Off」]
☫[Jam 「On/Off」]
☫[Leave 「On/Off」]
☫[Group Cancel:]
☫[Jam Say:「Nama」]
☫[Update]
☫[Groups]
☫[Mcheck]
☫[Pesan Cek]
☫[Blocklist]
☫[Creator]
☫[Pesan set:「Text」]

COMMAND IN GROUP

☫[Kick:「mid」]
☫[Invite:「mid」]
☫[Cancel]
☫[Ourl]
☫[Banlist]
☫[Curl]
☫[Invite:gcreator]
☫[Protect 「On/Off」]
☫[Qr 「On/Off」]
☫[Cancel 「On/Off」]
☫[Invite 「On/Off」]
☫[Ginfo]
☫[Backup]
☫[Sayang]
☫[Gn 「Nama Grup」]
☫[Album:「ID」]
☫[Gurl 「ID」]
☫[Nk「nama」]
☫[Ban]
☫[Unban]
☫[Ban:]
☫[Unban:]  

==========
"""
KAC = [cl, ki, ki2, ki3, ki4, ki5, ki6, ki7, ki8, ki9]
mid = cl.getProfile().mid
kimid = ki.getProfile().mid
ki2mid = ki2.getProfile().mid
ki3mid = ki3.getProfile().mid
ki4mid = ki4.getProfile().mid
ki5mid = ki5.getProfile().mid
ki6mid = ki6.getProfile().mid
ki7mid = ki7.getProfile().mid
ki8mid = ki8.getProfile().mid
ki9mid = ki9.getProfile().mid

Bots = [mid, kimid, ki2mid, ki3mid, ki4mid, ki5mid, ki6mid, ki7mid, ki8mid, ki9mid]
admsa = "ub1e94db89396dd6cbd72190f371c1ecd"
admin = [ki2mid, ki3mid, ki4mid,ki5mid,ki6mid,ki7mid, ki8mid, ki9mid]
wait = {
    'contact': False,
    'autoJoin': True,
    'autoCancel': {"on": True, "members": 3},
    'leaveRoom': True,
    'timeline': False,
    'autoAdd': False,
    'message': "тнαикѕ fσя α∂∂ιиg мє αѕ α fяιєиd",
    "lang": "JP",
    "comment": "Thanks For Add Me",
    "commentOn": False,
    "commentBlack": {},
    "wblack": False,
    "dblack": False,
    "clock": True,
    "cName": "",
    "blacklist": {},
    "wblacklist": False,
    "dblacklist": False,
    "protect": True,
    "cancelprotect": False,
    "inviteprotect": False,
    "linkprotect": False,
}


def cms(string, commands):  # /XXX, >XXX, ;XXX, ^XXX, %XXX, $XXX...
    tex = ["+", "@", "/", ">", ";", "^", "%", "$", "＾", "サテラ:", "サテラ:", "サテラ：", "サテラ："]
    for texX in tex:
        for command in commands:
            if string == command:
                return True
    return False


def bot(op):
    try:
        if op.type == 0:
            return
        if op.type == 13:
            if mid in op.param3:
                G = cl.getGroup(op.param1)
                if wait["autoJoin"] == True:
                    if wait["autoCancel"]["on"] == True:
                        if len(G.members) <= wait["autoCancel"]["members"]:
                            cl.rejectGroupInvitation(op.param1)
                        else:
                            cl.acceptGroupInvitation(op.param1)
                    else:
                        cl.acceptGroupInvitation(op.param1)
                elif wait["autoCancel"]["on"] == True:
                    if len(G.members) <= wait["autoCancel"]["members"]:
                        cl.rejectGroupInvitation(op.param1)
            else:
                Inviter = op.param3.replace("", ',')
                InviterX = Inviter.split(",")
                matched_list = []
                for tag in wait["blacklist"]:
                    matched_list += filter(lambda str: str == tag, InviterX)
                if matched_list == []:
                    pass
                else:
                    cl.cancelGroupInvitation(op.param1, matched_list)
        if op.type == 19:
            if mid in op.param3:
                wait["blacklist"][op.param2] = True
        if op.type == 22:
            if wait["leaveRoom"] == True:
                cl.leaveRoom(op.param1)
        if op.type == 24:
            if wait["leaveRoom"] == True:
                cl.leaveRoom(op.param1)
        if op.type == 26:
            msg = op.message
            if msg.toType == 0:
                msg.to = msg.from_
                if msg.from_ in admsa:
                    if "join:" in msg.text:
                        list_ = msg.text.split(":")
                        try:
                            cl.acceptGroupInvitationByTicket(list_[1], list_[2])
                            G = cl.getGroup(list_[1])
                            G.preventJoinByTicket = True
                            cl.updateGroup(G)
                        except:
                            cl.sendText(msg.to, "error")
            if msg.toType == 1:
                if wait["leaveRoom"] == True:
                    cl.leaveRoom(msg.to)

        if op.type == 26:
            msg = op.message
        if msg.contentType == 13:
            if wait["wblack"] == True:
                if msg.contentMetadata["mid"] in wait["commentBlack"]:
                    cl.sendText(msg.to, "sudah masuk daftar hitam")
                    wait["wblack"] = False
                else:
                    wait["commentBlack"][msg.contentMetadata["mid"]] = True
                    wait["wblack"] = False
                    cl.sendText(msg.to, "Itu tidak berkomentar")
            elif wait["dblack"] == True:
                if msg.contentMetadata["mid"] in wait["commentBlack"]:
                    del wait["commentBlack"][msg.contentMetadata["mid"]]
                    cl.sendText(msg.to, "Done")
                    wait["dblack"] = False
                else:
                    wait["dblack"] = False
                    cl.sendText(msg.to, "Tidak ada dalam daftar hitam")
            elif wait["wblacklist"] == True:
                if msg.contentMetadata["mid"] in wait["blacklist"]:
                    cl.sendText(msg.to, "sudah masuk daftar hitam")
                    wait["wblacklist"] = False
                else:
                    wait["blacklist"][msg.contentMetadata["mid"]] = True
                    wait["wblacklist"] = False
                    cl.sendText(msg.to, "Done")
            elif wait["dblacklist"] == True:
                if msg.contentMetadata["mid"] in wait["blacklist"]:
                    del wait["blacklist"][msg.contentMetadata["mid"]]
                    cl.sendText(msg.to, "Done")
                    wait["dblacklist"] = False
                else:
                    wait["dblacklist"] = False
                    cl.sendText(msg.to, "Done")
        elif msg.text is None:
            return
        # -----------------------------------------------
        elif "Tspam " in msg.text:
                    if msg.from_ in admsa or admin:
                        target = msg.text.replace("Tspam ", "")
                        target2 = target.split()
                        midd = target2[0]
                        if target2[0] == "s1":
                            midd = "ueff8f78401c867593c6ddc8aeb8c649d"
                        elif target2[0] == "s2":
                            midd = "u9fec89015e171bc9a8f82ce1ded83075"
                        elif target2[0] == "s3":
                            midd = "ubb4183ea6b5c541817eaa3e6a8c6acfe"
                        else:
                            midd = target2[0]
                        jumlah = int(target2[1])
                        pesan = str(target2[2])+" "+str(target2[3])
                        if jumlah <= 100:
                            for var in range(0, jumlah):
                                if (pesan in [" ", " "," ", " ","/n", None]):
                                    pass
                                else:
                                    angka=(5, 10, 15, 20, 25, 30, 35, 40, 22, 33, 11, 12, 23, 34)
                                    timer = random.choice(angka)
                                    cl.findAndAddContactsByMid(midd)
                                    cl.sendText(midd, pesan)
                                    time.sleep(timer)
                                    ki1.sendText(midd, pesan)
                                    time.sleep(timer)
                                    ki2.sendText(midd, pesan)
                                    time.sleep(timer)
                                    ki3.sendText(midd, pesan)
                                    time.sleep(timer)
                                    ki4.sendText(midd, pesan)
                                    time.sleep(timer)
                                    ki5.sendText(midd, pesan)
                                    time.sleep(timer)
                                    ki6.sendText(midd, pesan)
                                    time.sleep(timer)
                                    ki7.sendText(midd, pesan)
                                    time.sleep(timer)
                                    ki8.sendText(midd, pesan)
                                    time.sleep(timer)
                                    ki9.sendText(midd, pesan)
                                    cl.sendText(msg.to, "Sukses Tspam")
                                    print "[notif] Spam chat Mid sukses"
                                    time.sleep(100)
                    else:
                        cl.sendText(msg.to, "Tidak bisa lebih dari seratus")

        if op.type == 19:
            try:
                if op.param3 in mid:
                    if op.param2 in kimid:
                        G = ki.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki.updateGroup(G)
                        Ticket = ki.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        cl.updateGroup(G)
                    else:
                        G = ki.getGroup(op.param1)

                        ki.kickoutFromGroup(op.param1, [op.param2])

                        G.preventJoinByTicket = False
                        ki.updateGroup(G)
                        Ticket = ki.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        cl.updateGroup(G)
                        ki.updateGroup(G)
                        wait["blacklist"][op.param2] = True



                elif op.param3 in kimid:
                    if op.param2 in ki2mid:
                        G = ki2.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki2.updateGroup(G)
                        Ticket = ki2.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki8.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki9.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki10.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki11.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki12.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki13.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki14.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki15.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki16.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki17.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki2.updateGroup(G)
                    else:
                        G = ki2.getGroup(op.param1)

                        ki2.kickoutFromGroup(op.param1, [op.param2])

                        G.preventJoinByTicket = False
                        ki2.updateGroup(G)
                        Ticket = ki2.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki8.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki9.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki10.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki11.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki12.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki13.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki14.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki15.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki16.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki17.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki.updateGroup(G)


                elif op.param3 in ki3mid:
                    if op.param2 in ki2mid:
                        G = ki2.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki2.updateGroup(G)
                        Ticket = ki2.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki8.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki9.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki10.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki11.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki12.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki13.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki14.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki15.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki16.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki17.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki2.updateGroup(G)
                    else:
                        G = cl.getGroup(op.param1)

                        ki2.kickoutFromGroup(op.param1, [op.param2])

                        G.preventJoinByTicket = False
                        ki2.updateGroup(G)
                        Ticket = ki2.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki8.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki9.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki10.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki11.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki12.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki13.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki14.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki15.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki16.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki17.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki2.updateGroup(G)

                elif op.param3 in ki2mid:
                    if op.param2 in ki3mid:
                        G = ki3.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki3.updateGroup(G)
                        Ticket = ki3.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki8.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki9.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki10.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki11.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki12.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki13.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki14.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki15.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki16.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki17.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki3.updateGroup(G)
                    else:
                        G = cl.getGroup(op.param1)

                        ki3.kickoutFromGroup(op.param1, [op.param2])

                        G.preventJoinByTicket = False
                        ki3.updateGroup(G)
                        Ticket = ki3.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki8.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki9.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki10.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki11.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki12.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki13.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki14.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki15.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki16.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki17.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki3.updateGroup(G)

                elif op.param3 in ki4mid:
                    if op.param2 in ki5mid:
                        G = ki5.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki5.updateGroup(G)
                        Ticket = ki5.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki8.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki9.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki10.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki11.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki12.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki13.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki14.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki15.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki16.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki17.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        cl.updateGroup(G)
                    else:
                        G = ki5.getGroup(op.param1)

                        ki5.kickoutFromGroup(op.param1, [op.param2])

                        G.preventJoinByTicket = False
                        ki5.updateGroup(G)
                        Ticket = ki5.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki8.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki9.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki10.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki11.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki12.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki13.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki14.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki15.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki16.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki17.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki5.updateGroup(G)

                elif op.param3 in ki5mid:
                    if op.param2 in ki4mid:
                        G = ki4.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki4.updateGroup(G)
                        Ticket = ki4.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki8.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki9.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki10.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki11.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki12.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki13.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki14.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki15.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki16.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki17.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki4.updateGroup(G)
                    else:
                        G = ki4.getGroup(op.param1)

                        ki4.kickoutFromGroup(op.param1, [op.param2])

                        G.preventJoinByTicket = False
                        ki4.updateGroup(G)
                        Ticket = ki4.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki8.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki9.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki10.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki11.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki12.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki13.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki14.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki15.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki16.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki17.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki4.updateGroup(G)

                elif op.param3 in ki6mid:
                    if op.param2 in ki5mid:
                        G = ki5.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki5.updateGroup(G)
                        Ticket = ki5.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki8.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki9.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki10.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki11.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki12.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki13.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki14.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki15.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki16.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki17.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki5.updateGroup(G)
                    else:
                        G = ki5.getGroup(op.param1)

                        ki5.kickoutFromGroup(op.param1, [op.param2])

                        G.preventJoinByTicket = False
                        ki5.updateGroup(G)
                        Ticket = ki5.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki8.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki9.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki10.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki11.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki12.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki13.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki14.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki15.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki16.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki17.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki5.updateGroup(G)

                elif op.param3 in ki7mid:
                    if op.param2 in ki6mid:
                        G = ki6.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki6.updateGroup(G)
                        Ticket = ki6.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki8.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki9.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki10.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki11.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki12.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki13.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki14.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki15.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki16.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki17.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki6.updateGroup(G)
                    else:
                        G = ki6.getGroup(op.param1)

                        ki6.kickoutFromGroup(op.param1, [op.param2])

                        G.preventJoinByTicket = False
                        ki6.updateGroup(G)
                        Ticket = ki6.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki8.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki9.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki10.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki11.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki12.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki13.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki14.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki15.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki16.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki17.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki6.updateGroup(G)

            except:
                pass
        if op.type == 17:
            if op.param2 not in Bots:
                if op.param2 in Bots:
                    pass
            if wait["protect"] == True:
                if wait["blacklist"][op.param2] == True:
                    try:
                        random.choice(KAC).kickoutFromGroup(op.param1, [op.param2])
                        G = random.choice(KAC).getGroup(op.param1)
                        G.preventJoinByTicket = True
                        random.choice(KAC).updateGroup(G)
                    # random.choice(KAC).kickoutFromGroup(op.param1,[op.param2])
                    except:
                        #			pass
                        try:
                            random.choice(KAC).kickoutFromGroup(op.param1, [op.param2])
                            G = random.choice(KAC).getGroup(op.param1)
                            G.preventJoinByTicket = True
                            random.choice(KAC).updateGroup(G)
                        # random.choice(KAK).kickoutFromGroup(op.param1,[op.param2])
                        except:
                            pass
                elif op.param2 not in Bots:
                    random.choice(KAC).sendText(op.param1, "Welcome. Don't Play Bots. I can kick you!")
            else:
                pass
        if op.type == 19:
            if op.param2 not in Bots:
                if op.param2 in Bots:
                    pass
                elif wait["protect"] == True:
                    wait["blacklist"][op.param2] = True
                    random.choice(KAC).kickoutFromGroup(op.param1, [op.param2])
                else:
                    cl.sendText(op.param1, "")
            else:
                cl.sendText(op.param1, "")
        if op.type == 13:
            if op.param2 not in Bots:
                if op.param2 in Bots:
                    pass
                elif wait["inviteprotect"] == True:
                    wait["blacklist"][op.param2] = True
                    cl.cancelGroupInvitation(op.param1, [op.param3])
                    random.choice(KAC).kickoutFromGroup(op.param1, [op.param2])
            if op.param2 not in Bots:
                if op.param2 in Bots:
                    pass
                elif wait["cancelprotect"] == True:
                    cl.cancelGroupInvitation(op.param1, [contact.mid for contact in cl.getGroup(op.param1).invitee])
        if op.type == 11:
            if op.param2 not in Bots:
                if op.param2 in Bots:
                    pass
                elif wait["linkprotect"] == True:
                    wait["blacklist"][op.param2] = True
                    G = ki.getGroup(op.param1)
                    G.preventJoinByTicket = True
                    ki.updateGroup(G)
                    random.choice(KAC).kickoutFromGroup(op.param1, [op.param2])
                else:
                    cl.sendText(op.param1, "")
            else:
                cl.sendText(op.param1, "")
        if op.type == 5:
            if wait["autoAdd"] == True:
                if (wait["message"] in ["", " ", "\n", None]):
                    pass
                else:
                    cl.sendText(op.param1, str(wait["message"]))
                    # ------------------------------------------------------------------------------------
        if op.type == 59:
            print op


    except Exception as error:
        print error


def a2():
    now2 = datetime.now()
    nowT = datetime.strftime(now2, "%M")
    if nowT[14:] in ["10", "20", "30", "40", "50", "00"]:
        return False
    else:
        return True


def nameUpdate():
    while True:
        try:
            # while a2():
            # pass
            if wait["clock"] == True:
                now2 = datetime.now()
                nowT = datetime.strftime(now2, "༺%H:%M༻")
                profile = cl.getProfile()
                profile.displayName = wait["cName"] + nowT
                cl.updateProfile(profile)
            time.sleep(600)
        except:
            pass


thread2 = threading.Thread(target=nameUpdate)
thread2.daemon = True
thread2.start()

while True:
    try:
        Ops = cl.fetchOps(cl.Poll.rev, 5)
    except EOFError:
        raise Exception("It might be wrong revision\n" + str(cl.Poll.rev))

    for Op in Ops:
        if (Op.type != OpType.END_OF_OPERATION):
            cl.Poll.rev = max(cl.Poll.rev, Op.revision)
            bot(Op)
