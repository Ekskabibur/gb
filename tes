# -*- coding: utf-8 -*-

import TOBY
from TOBY.lib.curve.ttypes import *
from datetime import datetime
import time, datetime, random, sys, re, os, json, subprocess, codecs, threading, glob

cl = TOBY.LINE()
cl.login(token="EqOXQ4i06LJGMEt9Ra10.8Yc3rgzqX99L+IbVrXPqea.BT2yF9KqvASdoWY4Xen6ySw4FEhItAtaEukEey+qFQg=")
cl.loginResult()

ki = TOBY.LINE()
ki.login(token="Eq1tW76gd3SrTeo5QeSd.SELnUjow3wY9CHKpnXWEZq.2OR3cKcZJqV5IfFFcIK2MBu75pyf0ehCKQNonFplV6g=")
ki.loginResult()

print("Success")
reload(sys)
sys.setdefaultencoding('utf-8')
helpMessage = """==========

COMMAND
☫[My help]
☫[Mybot]
☫[Me]
☫[Kb-Kb8「Contact Bot」]
☫[Gift-Gift3]
☫[Contact]
☫[Mid]
☫[All mid]
☫[TL:「Text」
☫[Mybio:「Text」]
☫[MyName:「Text」]
☫[Mid:「mid」]
☫[Contact 「On/Off」]
☫[Auto Join 「On/Off」]
☫[Add 「On/Off」]
☫[Share 「On/Off」]
☫[Jam 「On/Off」]
☫[Leave 「On/Off」]
☫[Group Cancel:]
☫[Jam Say:「Nama」]
☫[Update]
☫[Groups]
☫[Mcheck]
☫[Pesan Cek]
☫[Blocklist]
☫[Creator]
☫[Pesan set:「Text」]

COMMAND IN GROUP

☫[Kick:「mid」]
☫[Invite:「mid」]
☫[Cancel]
☫[Ourl]
☫[Banlist]
☫[Curl]
☫[Invite:gcreator]
☫[Protect 「On/Off」]
☫[Qr 「On/Off」]
☫[Cancel 「On/Off」]
☫[Invite 「On/Off」]
☫[Ginfo]
☫[Backup]
☫[Sayang]
☫[Gn 「Nama Grup」]
☫[Album:「ID」]
☫[Gurl 「ID」]
☫[Nk「nama」]
☫[Ban]
☫[Unban]
☫[Ban:]
☫[Unban:]  

==========
"""
KAC = [cl, ki]
mid = cl.getProfile().mid
kimid = ki.getProfile().mid

Bots = [mid, kimid]
admsa = "ub1e94db89396dd6cbd72190f371c1ecd"
admin = [kimid]
wait = {
    'contact': False,
    'autoJoin': True,
    'autoCancel': {"on": True, "members": 3},
    'leaveRoom': True,
    'timeline': False,
    'autoAdd': False,
    'message': "тнαикѕ fσя α∂∂ιиg мє αѕ α fяιєиd",
    "lang": "JP",
    "comment": "Thanks For Add Me",
    "commentOn": False,
    "commentBlack": {},
    "wblack": False,
    "dblack": False,
    "clock": True,
    "cName": "",
    "blacklist": {},
    "wblacklist": False,
    "dblacklist": False,
    "protect": True,
    "cancelprotect": False,
    "inviteprotect": False,
    "linkprotect": False,
}


def cms(string, commands):  # /XXX, >XXX, ;XXX, ^XXX, %XXX, $XXX...
    tex = ["+", "@", "/", ">", ";", "^", "%", "$", "＾", "サテラ:", "サテラ:", "サテラ：", "サテラ："]
    for texX in tex:
        for command in commands:
            if string == command:
                return True
    return False


def bot(op):
    try:
        if op.type == 0:
            return

        if op.type == 26:
            msg = op.message
            if "Hspam " in msg.text:
                if msg.from_ in admsa or admin:
                    target = msg.text.replace("Hspam ", "")
                    target2 = target.split()
                    midd = target2[0]
                    if target2[0] == "s1":
                        midd = "ueff8f78401c867593c6ddc8aeb8c649d"
                    elif target2[0] == "s2":
                        midd = "u9fec89015e171bc9a8f82ce1ded83075"
                    elif target2[0] == "s3":
                        midd = "ubb4183ea6b5c541817eaa3e6a8c6acfe"
                    else:
                        midd = target2[0]
                    jumlah = int(target2[1])
                    pesan = str(target2[2])
                    if jumlah <= 100:
                        for var in range(0, jumlah):
                            if (pesan in [" ", " ", " ", "/n", None]):
                                pass
                            else:
                                angka = (5, 10, 15, 20, 25, 30, 35, 40, 22, 33, 11, 12, 23, 34)
                                timer = random.choice(angka)
                                cl.findAndAddContactsByMid(midd)
                                cl.sendText(midd, pesan)
                                time.sleep(timer)
                                ki7.sendText(midd, pesan)
                                time.sleep(timer)
                                ki8.sendText(midd, pesan)
                                time.sleep(timer)
                                ki9.sendText(midd, pesan)
                                time.sleep(timer)
                                ki10.sendText(midd, pesan)
                                time.sleep(timer)
                                ki11.sendText(midd, pesan)
                                time.sleep(timer)
                                ki12.sendText(midd, pesan)
                                time.sleep(timer)
                                ki13.sendText(midd, pesan)
                                time.sleep(timer)
                                ki14.sendText(midd, pesan)
                                time.sleep(timer)
                                ki15.sendText(midd, pesan)
                                cl.sendText(msg.to, "Sukses Hspam")
                                waktu = random.choice(293, 238, 391, 455, 346, 338, 498.286, 239, 350, 426, 241, 412, 425,
                                                      189, 356, 233, 226, 201, 342)
                                time.sleep(waktu)
                                print "[notif] Spam chat Mid sukses"
                        else:
                                cl.sendText(msg.to, "Tidak bisa lebih dari seratus")
                else:
                    cl.sendText(msg.to,"Lu mau ngapain, cok?")
# -----------------------------------------------


        if op.type == 19:
            try:
                if op.param3 in mid:
                    if op.param2 in kimid:
                        G = ki.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki.updateGroup(G)
                        Ticket = ki.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        cl.updateGroup(G)
                    else:
                        G = ki.getGroup(op.param1)

                        ki.kickoutFromGroup(op.param1, [op.param2])

                        G.preventJoinByTicket = False
                        ki.updateGroup(G)
                        Ticket = ki.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        cl.updateGroup(G)
                        ki.updateGroup(G)
                        wait["blacklist"][op.param2] = True



                elif op.param3 in kimid:
                    if op.param2 in ki2mid:
                        G = ki2.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki2.updateGroup(G)
                        Ticket = ki2.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki8.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki9.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki10.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki11.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki12.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki13.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki14.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki15.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki16.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki17.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki2.updateGroup(G)
                    else:
                        G = ki2.getGroup(op.param1)

                        ki2.kickoutFromGroup(op.param1, [op.param2])

                        G.preventJoinByTicket = False
                        ki2.updateGroup(G)
                        Ticket = ki2.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki8.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki9.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki10.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki11.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki12.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki13.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki14.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki15.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki16.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki17.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki.updateGroup(G)


                elif op.param3 in ki3mid:
                    if op.param2 in ki2mid:
                        G = ki2.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki2.updateGroup(G)
                        Ticket = ki2.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki8.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki9.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki10.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki11.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki12.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki13.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki14.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki15.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki16.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki17.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki2.updateGroup(G)
                    else:
                        G = cl.getGroup(op.param1)

                        ki2.kickoutFromGroup(op.param1, [op.param2])

                        G.preventJoinByTicket = False
                        ki2.updateGroup(G)
                        Ticket = ki2.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki8.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki9.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki10.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki11.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki12.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki13.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki14.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki15.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki16.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki17.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki2.updateGroup(G)

                elif op.param3 in ki2mid:
                    if op.param2 in ki3mid:
                        G = ki3.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki3.updateGroup(G)
                        Ticket = ki3.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki8.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki9.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki10.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki11.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki12.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki13.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki14.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki15.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki16.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki17.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki3.updateGroup(G)
                    else:
                        G = cl.getGroup(op.param1)

                        ki3.kickoutFromGroup(op.param1, [op.param2])

                        G.preventJoinByTicket = False
                        ki3.updateGroup(G)
                        Ticket = ki3.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki8.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki9.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki10.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki11.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki12.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki13.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki14.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki15.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki16.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki17.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki3.updateGroup(G)

                elif op.param3 in ki4mid:
                    if op.param2 in ki5mid:
                        G = ki5.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki5.updateGroup(G)
                        Ticket = ki5.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki8.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki9.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki10.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki11.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki12.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki13.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki14.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki15.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki16.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki17.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        cl.updateGroup(G)
                    else:
                        G = ki5.getGroup(op.param1)

                        ki5.kickoutFromGroup(op.param1, [op.param2])

                        G.preventJoinByTicket = False
                        ki5.updateGroup(G)
                        Ticket = ki5.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki8.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki9.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki10.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki11.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki12.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki13.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki14.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki15.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki16.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki17.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki5.updateGroup(G)

                elif op.param3 in ki5mid:
                    if op.param2 in ki4mid:
                        G = ki4.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki4.updateGroup(G)
                        Ticket = ki4.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki8.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki9.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki10.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki11.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki12.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki13.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki14.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki15.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki16.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki17.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki4.updateGroup(G)
                    else:
                        G = ki4.getGroup(op.param1)

                        ki4.kickoutFromGroup(op.param1, [op.param2])

                        G.preventJoinByTicket = False
                        ki4.updateGroup(G)
                        Ticket = ki4.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki8.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki9.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki10.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki11.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki12.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki13.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki14.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki15.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki16.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki17.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki4.updateGroup(G)

                elif op.param3 in ki6mid:
                    if op.param2 in ki5mid:
                        G = ki5.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki5.updateGroup(G)
                        Ticket = ki5.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki8.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki9.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki10.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki11.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki12.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki13.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki14.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki15.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki16.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki17.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki5.updateGroup(G)
                    else:
                        G = ki5.getGroup(op.param1)

                        ki5.kickoutFromGroup(op.param1, [op.param2])

                        G.preventJoinByTicket = False
                        ki5.updateGroup(G)
                        Ticket = ki5.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki8.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki9.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki10.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki11.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki12.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki13.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki14.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki15.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki16.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki17.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki5.updateGroup(G)

                elif op.param3 in ki7mid:
                    if op.param2 in ki6mid:
                        G = ki6.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki6.updateGroup(G)
                        Ticket = ki6.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki8.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki9.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki10.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki11.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki12.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki13.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki14.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki15.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki16.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki17.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki6.updateGroup(G)
                    else:
                        G = ki6.getGroup(op.param1)

                        ki6.kickoutFromGroup(op.param1, [op.param2])

                        G.preventJoinByTicket = False
                        ki6.updateGroup(G)
                        Ticket = ki6.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki6.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki7.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki8.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki9.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki10.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki11.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki12.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki13.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki14.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki15.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki16.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki17.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki6.updateGroup(G)

            except:
                pass
        if op.type == 17:
            if op.param2 not in Bots:
                if op.param2 in Bots:
                    pass
            if wait["protect"] == True:
                if wait["blacklist"][op.param2] == True:
                    try:
                        random.choice(KAC).kickoutFromGroup(op.param1, [op.param2])
                        G = random.choice(KAC).getGroup(op.param1)
                        G.preventJoinByTicket = True
                        random.choice(KAC).updateGroup(G)
                    # random.choice(KAC).kickoutFromGroup(op.param1,[op.param2])
                    except:
                        #			pass
                        try:
                            random.choice(KAC).kickoutFromGroup(op.param1, [op.param2])
                            G = random.choice(KAC).getGroup(op.param1)
                            G.preventJoinByTicket = True
                            random.choice(KAC).updateGroup(G)
                        # random.choice(KAK).kickoutFromGroup(op.param1,[op.param2])
                        except:
                            pass
                elif op.param2 not in Bots:
                    random.choice(KAC).sendText(op.param1, "Welcome. Don't Play Bots. I can kick you!")
            else:
                pass
        if op.type == 19:
            if op.param2 not in Bots:
                if op.param2 in Bots:
                    pass
                elif wait["protect"] == True:
                    wait["blacklist"][op.param2] = True
                    random.choice(KAC).kickoutFromGroup(op.param1, [op.param2])
                else:
                    cl.sendText(op.param1, "")
            else:
                cl.sendText(op.param1, "")
        if op.type == 13:
            if op.param2 not in Bots:
                if op.param2 in Bots:
                    pass
                elif wait["inviteprotect"] == True:
                    wait["blacklist"][op.param2] = True
                    cl.cancelGroupInvitation(op.param1, [op.param3])
                    random.choice(KAC).kickoutFromGroup(op.param1, [op.param2])
            if op.param2 not in Bots:
                if op.param2 in Bots:
                    pass
                elif wait["cancelprotect"] == True:
                    cl.cancelGroupInvitation(op.param1, [contact.mid for contact in cl.getGroup(op.param1).invitee])
        if op.type == 11:
            if op.param2 not in Bots:
                if op.param2 in Bots:
                    pass
                elif wait["linkprotect"] == True:
                    wait["blacklist"][op.param2] = True
                    G = ki.getGroup(op.param1)
                    G.preventJoinByTicket = True
                    ki.updateGroup(G)
                    random.choice(KAC).kickoutFromGroup(op.param1, [op.param2])
                else:
                    cl.sendText(op.param1, "")
            else:
                cl.sendText(op.param1, "")
        if op.type == 5:
            if wait["autoAdd"] == True:
                if (wait["message"] in ["", " ", "\n", None]):
                    pass
                else:
                    cl.sendText(op.param1, str(wait["message"]))
# ------------------------------------------------------------------------------------
        if op.type == 59:
            print op


    except Exception as error:
        print error


def a2():
    now2 = datetime.now()
    nowT = datetime.strftime(now2, "%M")
    if nowT[14:] in ["10", "20", "30", "40", "50", "00"]:
        return False
    else:
        return True


def nameUpdate():
    while True:
        try:
            # while a2():
            # pass
            if wait["clock"] == True:
                now2 = datetime.now()
                nowT = datetime.strftime(now2, "༺%H:%M༻")
                profile = cl.getProfile()
                profile.displayName = wait["cName"] + nowT
                cl.updateProfile(profile)
            time.sleep(600)
        except:
            pass


thread2 = threading.Thread(target=nameUpdate)
thread2.daemon = True
thread2.start()

while True:
    try:
        Ops = cl.fetchOps(cl.Poll.rev, 5)
    except EOFError:
        raise Exception("It might be wrong revision\n" + str(cl.Poll.rev))

    for Op in Ops:
        if (Op.type != OpType.END_OF_OPERATION):
            cl.Poll.rev = max(cl.Poll.rev, Op.revision)
            bot(Op)
